Perfect — here’s your **final, polished prompt** ready to paste directly into **Replit** (or any AI coding workspace) to build your full-stack prototype of **City Safety Radar — Mumbai**.
It includes your full app description **plus** the `compute_safety_score()` function integrated neatly at the end.

---

## 💻 Prompt to Send to Replit

---

**Build a full-stack AI-powered web app called "City Safety Radar — Mumbai".**

---

### 🎯 GOAL:

Create a real-time **Safety Heatmap of Mumbai** that shows safety levels for different areas and provides the **safest route** between two locations.

---

### 🧩 TECH STACK:

* **Frontend:** React + Mapbox (or Leaflet) + TailwindCSS
* **Backend:** Python (FastAPI)
* **Database:** Firebase / MongoDB (mock data fine)
* **APIs:** OpenWeatherMap, Google Maps, Twitter/X API *(simulated)*
* **AI Models:**

  * NLP (for safety mentions → pre-trained BERT sentiment model or placeholder)
  * CV (simulated crowd density data)
  * Fusion model (average lighting + crowd + NLP score)

---

### 💡 FEATURES TO IMPLEMENT:

#### 1. Live Safety Heatmap

* Mumbai map divided into regions.
* Each region shows a **Safety Score (0–100)**:

  * 🔴 **Unsafe (<40)**
  * 🟡 **Moderate (40–70)**
  * 🟢 **Safe (>70)**
* Auto-updates every few seconds using simulated data.

#### 2. AI-Based Safety Scoring

Backend endpoint `/safety-score` calculates safety score based on:

* Lighting (simulated)
* Crowd density (mock camera data)
* Recent incident reports (mock JSON)
* NLP sentiment (mocked or random)

Returns JSON like:

```json
{ 
  "area": "Andheri", 
  "score": 82, 
  "crowd": 45, 
  "lighting": 80, 
  "recent_incidents": 1 
}
```

#### 3. AI Route Planner

* Inputs: Source + Destination (Mumbai locations)
* Output: **Safest route**, not shortest

  * Uses Google Maps directions
  * Avoids low-score regions
  * Weighted by safety score

#### 4. Live Alerts Panel

* Shows real-time alerts such as:

  > “Incident detected near Andheri — low lighting and sparse crowd.”
* Auto-refresh or WebSocket simulation.

#### 5. User Reports

* Users can manually report unsafe areas or incidents.
* Submissions update the map temporarily.

#### 6. Privacy Note

* Banner:

  > “All camera feeds anonymized. No personal tracking.”

---

### 🧠 OPTIONAL ADD-ONS:

* Predictive safety (simulate time-series)
* Chatbot: “Is Bandra safe right now?”
* Safety forecast chart (Chart.js)

---

### ⚙ FUNCTIONAL REQUIREMENTS:

**Backend (FastAPI) routes:**

* `/safety-score`
* `/get-heatmap`
* `/get-route`
* `/post-alert`

**Frontend:**

* Map view (Mumbai default zoom)
* Side panel: Live alerts + user reports
* Route planner UI (Source → Destination)
* Legend for color-coded safety levels

**Data:**
Use mock JSON or randomly generated safety data for now.

**AI Placeholder:**
Keep functions modular so real AI can be integrated later.

---

### 📦 FOLDER STRUCTURE:

```
city-safety-radar/
│
├── backend/
│   ├── main.py
│   ├── routers/
│   │   ├── safety.py
│   │   ├── route.py
│   │   ├── alerts.py
│   ├── models/
│   │   ├── ai_scorer.py
│   │   ├── nlp_model.py
│   │   ├── cv_model.py
│   ├── data/
│   │   ├── safety_data.json
│   │   ├── incidents.json
│   └── requirements.txt
│
├── frontend/
│   ├── src/
│   │   ├── components/
│   │   │   ├── MapView.jsx
│   │   │   ├── Sidebar.jsx
│   │   │   ├── RoutePlanner.jsx
│   │   │   ├── AlertPanel.jsx
│   │   ├── App.jsx
│   │   ├── index.js
│   └── package.json
│
└── README.md
```

---

### 🎨 DESIGN STYLE:

* Dark mode dashboard
* Neon accent colors for unsafe zones
* Floating cards for route & alerts
* Responsive layout
* “City-tech radar” aesthetic

---

### 🚀 DELIVERABLE:

A working prototype that:
✅ Displays Mumbai safety heatmap (auto-refreshing)
✅ Shows AI-based safest route between two points
✅ Has live alerts & user reports panel
✅ Uses mock AI with modular design

---

### 🧮 SAFETY SCORE FORMULA (include in backend `/models/ai_scorer.py`)

```python
def compute_safety_score(data, prev_score=70):
    L = min(data["lighting"] / 100, 1)
    C = min(data["crowd_density"] / 50, 1)
    I = 1 - min(data["incidents_24h"] / 10, 1)
    S = (data["sentiment"] + 1) / 2
    W = 1 - data["weather_risk"]
    P = 1 if data["police_nearby"] else 0.7
    T = 1 - data["night_factor"]

    raw = 100 * (0.20*L + 0.15*C + 0.25*I + 0.15*S + 0.10*W + 0.05*P + 0.10*T)
    final = 0.7*raw + 0.3*prev_score
    return round(final, 2)
```

---

### 🧠 TIP:

Start backend first (FastAPI routes + mock JSON),
then integrate frontend React components step by step.

---

Would you like me to generate **the actual backend FastAPI code files** (with mock endpoints `/safety-score`, `/get-heatmap`, etc.) and **frontend React skeleton** so you can upload directly to Replit next?
